replicaCount: 1

image:
  repository: projectnessie/nessie
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart version.
  tag: ""

# The default logging level for the nessie server
logLevel: INFO

# which type of version store to use: INMEMORY, ROCKS, DYNAMO, MONGO, TRANSACTIONAL
versionStoreType: INMEMORY

# this is needed when selecting ROCKS
rocksdb:
  dbPath: /tmp/rocks-nessie

# this is needed when selecting DYNAMO
dynamodb:
  region: us-west-2
  secret:
    name: awscreds
    awsAccessKeyId: aws_access_key_id
    awsSecretAccessKey: aws_secret_access_key

# this is needed when selecting MONGO
mongodb:
  name: nessie
  connectionString: mongodb://localhost:27017
  secret:
    name: mongodb-creds
    username: mongodb_username
    password: mongodb_password

# this is needed when selecting TRANSACTIONAL
postgres:
  jdbcUrl: jdbc:postgresql://localhost:5432/my_database
  secret:
    name: postgres-creds
    username: postgres_username
    password: postgres_password

# environment variables for advanced version store configuration
# versionStoreAdvancedConfig:
#   - key: QUARKUS_DATASOURCE_JDBC_POOLING_ENABLED
#     value: true

# configures authentication for the nessie server
authentication:
  enabled: false
  # Sets the base URL of the OpenID Connect (OIDC) server. Needs to be overridden with authentication.enabled=true
  oidcAuthServerUrl: http://127.255.0.0:0/auth/realms/unset/
  # Set the OIDC client ID when authentication.enabled=true. Each application has a client ID that is used to identify the application
  oidcClientId: nessie

# configures authorization for the nessie server
authorization:
  enabled: false
  # the authorization rules when authorization.enabled=true. Example rules can be found at https://projectnessie.org/features/metadata_authorization/#authorization-rules
  # rules:
  #  allowViewingBranch: op=='VIEW_REFERENCE' && role.startsWith('test_user') && ref.startsWith('allowedBranch')
  #  allowCommits: op=='COMMIT_CHANGE_AGAINST_REFERENCE' && role.startsWith('test_user') && ref.startsWith('allowedBranch')

# configure jaeger tracing for the nessie server
jaegerTracing:
  enabled: false
  # The traces endpoint, in case the client should connect directly to the Collector, like http://jaeger-collector:14268/api/traces
  # endpoint: http://localhost:14268/api/traces
  # the Jaeger service name
  serviceName: nessie
  # whether or not metrics are published if tracing is enabled
  publishMetrics: true
  # the sampler type (const, probabilistic, ratelimiting or remote)
  samplerType: ratelimiting
  # 1=Sample all requests. Set samplerParam to somewhere between 0 and 1, e.g. 0.50, if you do not wish to sample all requests
  samplerParam: 1

serviceMonitor:
  # Specifies whether ServiceMonitor for Prometheus operator should be created
  enabled: true
    # interval: 30s
  # labels for the created ServiceMonitor so that Prometheus operator can properly pick it up
  # labels:
    # release: prometheus


serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 19120
  # Annotations to add to the service
  annotations: {}

ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: chart-example.local
      paths: []
  tls: []

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
